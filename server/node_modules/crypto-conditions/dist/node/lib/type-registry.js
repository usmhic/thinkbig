"use strict";

var _sliceInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/slice");

var _Array$from = require("@babel/runtime-corejs3/core-js-stable/array/from");

var _Symbol = require("@babel/runtime-corejs3/core-js-stable/symbol");

var _getIteratorMethod = require("@babel/runtime-corejs3/core-js/get-iterator-method");

var _Array$isArray = require("@babel/runtime-corejs3/core-js-stable/array/is-array");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _maxSafeInteger = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/number/max-safe-integer"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _unsupportedTypeError = _interopRequireDefault(require("../errors/unsupported-type-error"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"]; if (!it) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { var _context; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty(_context = Object.prototype.toString.call(o)).call(_context, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return _Array$from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var TypeRegistry = /*#__PURE__*/function () {
  function TypeRegistry() {
    (0, _classCallCheck2.default)(this, TypeRegistry);
  }

  (0, _createClass2.default)(TypeRegistry, null, [{
    key: "findByTypeId",
    value:
    /**
     * Determine fulfillment implementation class from a type ID.
     *
     * Returns the class implementing a fulfillment type that matches a certain
     * type ID.
     *
     * @param {Number} type Type ID.
     * @return {Class} Class implementing the given fulfillment type ID.
     */
    function findByTypeId(typeId) {
      // Determine type of condition
      if (typeId > _maxSafeInteger.default) {
        throw new _unsupportedTypeError.default('Type ' + typeId + ' is not supported');
      }

      var _iterator = _createForOfIteratorHelper(TypeRegistry.registeredTypes),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var type = _step.value;
          if (typeId === type.typeId) return type;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      throw new _unsupportedTypeError.default('Type ' + typeId + ' is not supported');
    }
  }, {
    key: "findByName",
    value: function findByName(name) {
      var _iterator2 = _createForOfIteratorHelper(TypeRegistry.registeredTypes),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var type = _step2.value;
          if (name === type.name) return type;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      throw new _unsupportedTypeError.default('Type ' + name + ' is not supported');
    }
  }, {
    key: "findByAsn1ConditionType",
    value: function findByAsn1ConditionType(asn1Type) {
      var _iterator3 = _createForOfIteratorHelper(TypeRegistry.registeredTypes),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var type = _step3.value;
          if (asn1Type === type.asn1Condition) return type;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      throw new _unsupportedTypeError.default('Type ' + asn1Type + ' is not supported');
    }
  }, {
    key: "findByAsn1FulfillmentType",
    value: function findByAsn1FulfillmentType(asn1Type) {
      var _iterator4 = _createForOfIteratorHelper(TypeRegistry.registeredTypes),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var type = _step4.value;
          if (asn1Type === type.asn1Fulfillment) return type;
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      throw new _unsupportedTypeError.default('Type ' + asn1Type + ' is not supported');
    }
    /**
     * Add a new fulfillment type.
     *
     * This can be used to extend this cryptocondition implementation with new
     * fulfillment types that it does not yet support. But mostly it is used
     * internally to register the built-in types.
     *
     * In this method, we expect a regular fulfillment type, for information on
     * registering meta types please see `registerMetaType`.
     *
     * @param {Class} Class Implementation of a fulfillment type.
     */

  }, {
    key: "registerType",
    value: function registerType(Class) {
      // TODO Do some sanity checks on Class
      TypeRegistry.registeredTypes.push({
        typeId: Class.TYPE_ID,
        name: Class.TYPE_NAME,
        asn1Condition: Class.TYPE_ASN1_CONDITION,
        asn1Fulfillment: Class.TYPE_ASN1_FULFILLMENT,
        Class: Class
      });
    }
  }]);
  return TypeRegistry;
}();

TypeRegistry.registeredTypes = [];
var _default = TypeRegistry;
exports.default = _default;