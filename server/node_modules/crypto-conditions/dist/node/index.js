"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

_Object$defineProperty(exports, "Condition", {
  enumerable: true,
  get: function get() {
    return _condition.default;
  }
});

_Object$defineProperty(exports, "Ed25519Sha256", {
  enumerable: true,
  get: function get() {
    return _ed25519Sha.default;
  }
});

_Object$defineProperty(exports, "Fulfillment", {
  enumerable: true,
  get: function get() {
    return _fulfillment.default;
  }
});

_Object$defineProperty(exports, "PrefixSha256", {
  enumerable: true,
  get: function get() {
    return _prefixSha.default;
  }
});

_Object$defineProperty(exports, "PreimageSha256", {
  enumerable: true,
  get: function get() {
    return _preimageSha.default;
  }
});

_Object$defineProperty(exports, "RsaSha256", {
  enumerable: true,
  get: function get() {
    return _rsaSha.default;
  }
});

_Object$defineProperty(exports, "ThresholdSha256", {
  enumerable: true,
  get: function get() {
    return _thresholdSha.default;
  }
});

_Object$defineProperty(exports, "base64url", {
  enumerable: true,
  get: function get() {
    return _base64url.default;
  }
});

exports.validateFulfillment = exports.validateCondition = exports.fulfillmentToCondition = exports.fromJson = exports.fromFulfillmentUri = exports.fromFulfillmentBinary = exports.fromConditionUri = exports.fromConditionBinary = void 0;

var _bind = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/bind"));

var _condition = _interopRequireDefault(require("./lib/condition"));

var _fulfillment = _interopRequireDefault(require("./lib/fulfillment"));

var _typeRegistry = _interopRequireDefault(require("./lib/type-registry"));

var _preimageSha = _interopRequireDefault(require("./types/preimage-sha256"));

var _prefixSha = _interopRequireDefault(require("./types/prefix-sha256"));

var _thresholdSha = _interopRequireDefault(require("./types/threshold-sha256"));

var _rsaSha = _interopRequireDefault(require("./types/rsa-sha256"));

var _ed25519Sha = _interopRequireDefault(require("./types/ed25519-sha256"));

var _base64url = _interopRequireDefault(require("./util/base64url"));

var _context, _context2, _context3, _context4;

var EMPTY_BUFFER = Buffer.alloc(0);

_typeRegistry.default.registerType(_preimageSha.default);

_typeRegistry.default.registerType(_prefixSha.default);

_typeRegistry.default.registerType(_thresholdSha.default);

_typeRegistry.default.registerType(_rsaSha.default);

_typeRegistry.default.registerType(_ed25519Sha.default);

var validateCondition = function validateCondition(serializedCondition) {
  // Parse condition, throw on error
  var condition = _condition.default.fromUri(serializedCondition); // Validate condition, throw on error


  return condition.validate();
};

exports.validateCondition = validateCondition;

var validateFulfillment = function validateFulfillment(serializedFulfillment, serializedCondition, message) {
  if (typeof message === 'undefined') {
    message = EMPTY_BUFFER;
  }

  if (!Buffer.isBuffer(message)) {
    throw new Error('Message must be provided as a Buffer');
  } // Parse fulfillment, throw on error


  var fulfillment = _fulfillment.default.fromUri(serializedFulfillment); // Compare condition URI, throw on error


  var conditionUri = fulfillment.getConditionUri();

  if (conditionUri !== serializedCondition) {
    throw new Error('Fulfillment does not match condition (expected: ' + serializedCondition + ', actual: ' + conditionUri + ')');
  } // Validate fulfillment, throw on error


  return fulfillment.validate(message);
};

exports.validateFulfillment = validateFulfillment;

var fulfillmentToCondition = function fulfillmentToCondition(serializedFulfillment) {
  // Parse fulfillment, throw on error
  var fulfillment = _fulfillment.default.fromUri(serializedFulfillment);

  return fulfillment.getConditionUri();
};

exports.fulfillmentToCondition = fulfillmentToCondition;

var fromJson = function fromJson(json) {
  return _fulfillment.default.fromJson(json);
};

exports.fromJson = fromJson;
var fromConditionUri = (0, _bind.default)(_context = _condition.default.fromUri).call(_context, _condition.default);
exports.fromConditionUri = fromConditionUri;
var fromConditionBinary = (0, _bind.default)(_context2 = _condition.default.fromBinary).call(_context2, _condition.default);
exports.fromConditionBinary = fromConditionBinary;
var fromFulfillmentUri = (0, _bind.default)(_context3 = _fulfillment.default.fromUri).call(_context3, _fulfillment.default);
exports.fromFulfillmentUri = fromFulfillmentUri;
var fromFulfillmentBinary = (0, _bind.default)(_context4 = _fulfillment.default.fromBinary).call(_context4, _fulfillment.default);
exports.fromFulfillmentBinary = fromFulfillmentBinary;